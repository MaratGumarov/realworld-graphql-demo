type Query {
    articleById(id: ID): Article
    findArticleByIds(ids: [ID]): [Article]
    findArticleByIdWithAuthor(id: ID): Article
    findArticleByIdsWithAuthor(ids: [ID]): [Article]
    articlesByAuthor(id: ID): [Article]
    articles: [Article]
    findArticlesByLabel(label: Label): [Article]
}

interface Article{
    id:ID
    author:Author
    label:Label
    description: String
}

type NewsArticle implements Article{
    id: ID
    author: Author
    text: String
    description: String
    date: String
    label:Label
}

type StaticImageArticle implements Article{
    id:ID
    author:Author
    url:String
    label:Label
    description: String
}

type ArticlePage{
    edje:Edje
    pageInfo:PageInfo
}

type Author {
    id: ID
    firstName: String
    lastName: String
}

type Edje{
    node: Node
}
type Node{
    article:Article
}

type PageInfo{
    hasNextPage: Boolean
    hasPreviousPage: Boolean
    startCursor: Boolean
    endCursor: Boolean
}

enum Label {
    SPORT,
    POLITICS,
    SCIENCE,
    WORLD,
    OTHER
}